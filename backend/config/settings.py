"""
Django settings for adhd-system-manager project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APP_ENV = os.environ.get("APP_ENV", "dev")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if APP_ENV in ["prod", "stage"] and not SECRET_KEY:
    raise ValueError("SECRET_KEY must be set in production environment")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = APP_ENV not in ["prod", "stage"]

CORS_ORIGIN_ALLOW_ALL = False

if APP_ENV in ["dev", "test"]:
    CORS_ALLOWED_ORIGINS = (
        'http://localhost:8081',
        'http://localhost:8080',
        'http://localhost:3000',
    )
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8081',
        'http://localhost:8080',
        'http://localhost:3000',
    ]
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Required for allauth

    # "drf_spectacular",
    # "rest_framework",
    # "corsheaders",
    # "rest_framework_simplejwt",

    # Allauth
    "allauth",
    "allauth.account",
    # Note: NO socialaccount (future feature)

    # Project apps
    "authentication",
    "tasks",
    "frontend",
]

MIDDLEWARE = [
    "config.middleware.health_check_middleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Required for Allauth
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Add project-level templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

SQL_DATABASE = os.environ.get("SQL_DATABASE")
SQL_USER = os.environ.get("username") if APP_ENV in ["stage", "dev"] else os.environ.get("SQL_USER")
SQL_PASSWORD = os.environ.get("password") if APP_ENV in ["stage"] else os.environ.get("SQL_PASSWORD")
SQL_HOST = os.environ.get("SQL_HOST")

required_database = {
    "SQL_DATABASE": SQL_DATABASE,
    "SQL_USER": SQL_USER,
    "SQL_PASSWORD": SQL_PASSWORD,
    "SQL_HOST": SQL_HOST,
}

missing = [name for name, val in required_database.items() if not val]
if missing and APP_ENV in ["prod", "stage", "dev"]:
    raise ImproperlyConfigured(
        f"Missing required database settings: {', '.join(missing)}"
    )

if APP_ENV in ["prod", "stage", "dev"]:
    # Production database configuration optimized for RDS
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": SQL_DATABASE,
            "USER": SQL_USER,
            "PASSWORD": SQL_PASSWORD,
            "HOST": SQL_HOST,
            "PORT": "5432",
            "OPTIONS": {
                'connect_timeout': 10,
                'application_name': 'adhd_system_manager',
            },
            # Connection pooling settings for RDS with 87 max connections
            'CONN_MAX_AGE': 600,  # 10 minutes - keeps connections alive to reduce overhead
            'CONN_HEALTH_CHECKS': True,  # Verify connections before use
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }



# ============================================
# AUTHENTICATION CONFIGURATION
# ============================================

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Custom User Model
AUTH_USER_MODEL = 'authentication.User'

# Site Framework (required for allauth)
SITE_ID = 1

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 12},
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "authentication.validators.PasswordComplexityValidator",
    },
]

# ============================================
# ALLAUTH CONFIGURATION (Updated to new format)
# ============================================

# Authentication method (NEW FORMAT)
ACCOUNT_LOGIN_METHODS = {'email'}  # Email-only login (no username)
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Disable username completely

# Email verification (DISABLED - future feature)
ACCOUNT_EMAIL_VERIFICATION = 'none'  # No email verification for now

# Signup fields (NEW FORMAT)
# Format: 'field' or 'field*' (asterisk = required)
ACCOUNT_SIGNUP_FIELDS = [
    'first_name*',   # Required: First name
    'last_name*',    # Required: Last name
    'email*',        # Required: Email address
    'email2*',       # Required: Confirm email
    'password1*',    # Required: Password
    'password2*',    # Required: Confirm password
]
ACCOUNT_UNIQUE_EMAIL = True

# Session settings
ACCOUNT_SESSION_REMEMBER = False  # "Remember me" unchecked by default
SESSION_COOKIE_AGE = 43200  # 12 hours (in seconds)
SESSION_SAVE_EVERY_REQUEST = True  # Extend session on activity
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SECURE = APP_ENV in ["prod", "stage"]
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# CSRF Protection
CSRF_USE_SESSIONS = APP_ENV in ["prod", "stage"]
CSRF_COOKIE_SECURE = APP_ENV in ["prod", "stage"]
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

# URL redirects
LOGIN_URL = '/auth/login/'
LOGIN_REDIRECT_URL = '/'  # Dashboard
ACCOUNT_LOGOUT_REDIRECT_URL = '/auth/login/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/'  # Dashboard

# Password settings
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False

# User activation
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https' if APP_ENV == 'prod' else 'http'

# Custom adapter
ACCOUNT_ADAPTER = 'authentication.adapters.CustomAccountAdapter'

# Rest Framework Settings
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.SessionAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     ),
#     'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
# }

## Fix later - only for API calls which are JSON requests
# if APP_ENV == 'prod' or APP_ENV == 'stage':
#     REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
#         'rest_framework.renderers.JSONRenderer',
#     )
#     REST_FRAMEWORK['DEFAULT_PARSER_CLASSES'] = (
#         'rest_framework.parsers.JSONParser',
#     )

# API Documentation Settings
# SPECTACULAR_SETTINGS = {
#     'TITLE': 'Sigma Beta Rho Database API',
#     'DESCRIPTION': 'API for the Sigma Beta Rho Database',
#     'VERSION': '0.1.0',
#     'SERVE_INCLUDE_SCHEMA': False,
#     # OTHER SETTINGS
# }

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / "static_project",  # Project-level static files
]

# S3/MinIO Storage Configuration

# Required settings for both AWS S3 and MinIO
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME_STATIC = os.environ.get('AWS_STORAGE_BUCKET_NAME_STATIC')
AWS_STORAGE_BUCKET_NAME_MEDIA = os.environ.get('AWS_STORAGE_BUCKET_NAME_MEDIA')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL')
CLOUD_FRONT_URL = os.environ.get('CLOUD_FRONT_URL')


if APP_ENV == "prod":
    AWS_S3_VERIFY = True
    STATIC_URL = f"https://{CLOUD_FRONT_URL}/"
    MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME_MEDIA}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/"

if APP_ENV in ["stage", "dev"]:
    STATIC_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME_STATIC}/'
    MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME_MEDIA}/'

if APP_ENV == "prod":
    # In production, only require bucket names and region
    required_s3 = {
        "AWS_STORAGE_BUCKET_NAME_STATIC": AWS_STORAGE_BUCKET_NAME_STATIC,
        "AWS_STORAGE_BUCKET_NAME_MEDIA": AWS_STORAGE_BUCKET_NAME_MEDIA,
        "AWS_S3_REGION_NAME": AWS_S3_REGION_NAME,
        "CLOUD_FRONT_URL": CLOUD_FRONT_URL,
    }
    missing = [name for name, val in required_s3.items() if not val]

    if missing:
        raise ImproperlyConfigured(
            f"Missing required S3/MinIO settings: {', '.join(missing)}"
        )

if APP_ENV in ["stage", "dev"]:
    # In production, only require bucket names and region
    required_s3 = {
        "AWS_STORAGE_BUCKET_NAME_STATIC": AWS_STORAGE_BUCKET_NAME_STATIC,
        "AWS_STORAGE_BUCKET_NAME_MEDIA": AWS_STORAGE_BUCKET_NAME_MEDIA,
        "AWS_S3_REGION_NAME": AWS_S3_REGION_NAME,
        "AWS_S3_ENDPOINT_URL": AWS_S3_ENDPOINT_URL,
    }
    missing = [name for name, val in required_s3.items() if not val]

    if missing:
        raise ImproperlyConfigured(
            f"Missing required S3/MinIO settings: {', '.join(missing)}"
        )

# Use the modern STORAGES configuration for Django 4.2+
if APP_ENV in ["prod", "stage", "dev"]:
    # Base storage options without credentials
    storage_options = {
        "bucket_name": AWS_STORAGE_BUCKET_NAME_MEDIA,
        "region_name": AWS_S3_REGION_NAME,
        "file_overwrite": False,
        "object_parameters": {
            'CacheControl': 'max-age=86400',
        },
        "querystring_auth": True,  # Enable signed URLs for media
        "querystring_expire": 3600  # 1 hour,
    }
    
    static_storage_options = {
        "bucket_name": AWS_STORAGE_BUCKET_NAME_STATIC,
        "region_name": AWS_S3_REGION_NAME,
        "location": "static",
        "file_overwrite": True,
        "querystring_auth": False,  # No signed URLs for static files
        "custom_domain": CLOUD_FRONT_URL if APP_ENV == "prod" else None,
    }
    
    # Add dev-specific options BEFORE creating STORAGES
    if APP_ENV in ["stage", "dev"]:
        storage_options.update({
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
        })
        static_storage_options.update({
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
        })
    
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": storage_options,
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": static_storage_options,
        },
    }
else:
    # Local storage configuration (testing)
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Production-specific settings
if APP_ENV in ["prod", "stage"]:
    # Security Settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'
    
    # HTTPS Settings - ADD THESE
    SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True

    # CORS and Hosts - ADD THESE
    CORS_ALLOWED_ORIGINS = tuple(
        group.strip() for group in os.environ.get('CORS_ALLOWED_ORIGINS', '').split(',') if group.strip()
        # 'https://app.prod.raulstechtips.dev',
        # 'https://app.raulstechtips.dev',
    )
    ALLOWED_HOSTS = [
        group.strip() for group in os.environ.get('ALLOWED_HOSTS', '').split(',') if group.strip()
        # 'app.prod.raulstechtips.dev',
        # 'app.raulstechtips.dev',
    ]

    # CSRF Trusted Origins - ADD THIS SECTION
    CSRF_TRUSTED_ORIGINS = [
        group.strip() for group in os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(',') if group.strip()
        # 'https://app.prod.raulstechtips.dev',
        # 'https://app.raulstechtips.dev',
    ]
    # Logging Configuration
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
            'json': {
                'format': '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "module": "%(module)s", "message": "%(message)s"}',
                'style': '%',
            },
        },
        'filters': {
            'exclude_health_checks': {
                '()': 'django.utils.log.CallbackFilter',
                'callback': lambda record: not (
                    hasattr(record, 'request') and 
                    hasattr(record.request, 'path') and
                    record.request.path == '/health/'
                ),
            },
            'health_check_only': {
                '()': 'django.utils.log.CallbackFilter',
                'callback': lambda record: (
                    hasattr(record, 'request') and 
                    hasattr(record.request, 'path') and
                    record.request.path == '/health/'
                ),
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'json',  # JSON format for CloudWatch parsing
                'filters': ['exclude_health_checks'],
            },
            'health_checks': {
                'level': 'WARNING',  # Only log health check errors
                'class': 'logging.StreamHandler',
                'formatter': 'json',
                'filters': ['health_check_only'],
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'WARNING',  # Reduce SQL query logging in production
                'propagate': False,
            },
            'django.security': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'django.request': {
                'handlers': ['console', 'health_checks'],
                'level': 'INFO',
                'propagate': False,
            },
            # Add missing logger configurations
            'authentication': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'config.middleware': {
                'handlers': ['console'],
                'level': 'WARNING',  # Only log warnings and errors from middleware
                'propagate': False,
            },
            'frontend': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'tasks': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            
            # Reduce noise from third-party libraries
            'boto3': {
                'handlers': ['console'],
                'level': 'WARNING',
                'propagate': False,
            },
            'botocore': {
                'handlers': ['console'],
                'level': 'WARNING',
                'propagate': False,
            },
            'urllib3': {
                'handlers': ['console'],
                'level': 'WARNING',
                'propagate': False,
            },
        },
    }
    
    # File-based caching (cost-effective alternative to Redis)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/tmp/django_cache',
            'TIMEOUT': 300,  # 5 minutes default
            'OPTIONS': {
                'MAX_ENTRIES': 1000,  # Maximum number of cache entries
                'CULL_FREQUENCY': 3,  # Remove 1/3 of entries when max is reached
            }
        }
    }
    
    # Performance settings
    DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
    FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
    
    # Disable Django Debug Toolbar and other development tools
    DEBUG_TOOLBAR_CONFIG = {}
    
    # Optimize for production
    TEMPLATE_DEBUG = False
    
    # Security middleware settings
    # SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
    # Rate limiting (basic implementation)
    # Note: For more sophisticated rate limiting, consider django-ratelimit package
    
    # Email configuration (placeholder for future implementation)
    # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    # EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
    # EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
    # EMAIL_USE_TLS = True
    # EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    # EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    # DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@yourdomain.com')